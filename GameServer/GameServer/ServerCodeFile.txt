

==================================================
GameServer.cpp, 저장시간: 2023-08-25 금요일 오전 12:59:51
==================================================
// GameServer.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//
#include "pch.h"
#include <iostream>


//마이크로소프트에서 제공하는 소켓 라이브러리
#include <WinSock2.h>
#include <MSWSock.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")


int main()
{
	save("GameServer.cpp", "ServerCodeFile.txt");

	WSADATA wsData;
	if (::WSAStartup(MAKEWORD(2, 2), &wsData))
		return 0;

	SOCKET listenSocket = ::socket(AF_INET, SOCK_STREAM, 0);
	if (listenSocket == INVALID_SOCKET) {

		int32 errCode = ::WSAGetLastError();
		cout << "SocketErrorCode" << endl;
		return 0;
	}


	//회사의 주소를 찍어줘야함(나의 주소는?)
	SOCKADDR_IN	serverAddr;//IPv4
	::memset(&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
	serverAddr.sin_port = htons(7777);


	//안내원의 폰을 개통해줘야함.!
	if (::bind(listenSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
	{
		int32 errCode = ::WSAGetLastError();
		cout << "SocketErrorCode" << endl;
		return 0;
	}


	//영업 시작
	if (::listen(listenSocket, 10)) {
		int32 errCode = WSAGetLastError();
		cout << "Listen ErrorCode" << endl;
		return 0;
	}

	//-------------------------

	while (true) {
		SOCKADDR_IN	clientAddr;//IPv4
		::memset(&clientAddr, 0, sizeof(serverAddr));
		int32 addrLen = sizeof(clientAddr);
		
		
		
		SOCKET clientSocket = ::accept(listenSocket, (SOCKADDR*)&clientAddr, &addrLen);
		//cleint소켓이 데이터를 주고 받을때 사용함!!!
		if (clientSocket == INVALID_SOCKET) {
			int32 errCode = ::WSAGetLastError();
			cout << "Accept Error" << errCode << endl;
			return 0;	SOCKADDR_IN	serverAddr;//IPv4
			::memset(&serverAddr, 0, sizeof(serverAddr));
		}


		char ipAddress[16];
		::inet_ntop(AF_INET, &clientAddr.sin_addr, ipAddress, sizeof(ipAddress));
		cout << "client Conneted! IP" << ipAddress << endl;



	}

	//-------------------------

	//소켓 리소스 반환
	closesocket(listenSocket);

	//윈속 종료.
	::WSACleanup();
}



==================================================
GameServer.cpp, 저장시간: 2023-08-25 금요일 오전 1:45:10
==================================================
// GameServer.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//
#include "pch.h"
#include <iostream>


//마이크로소프트에서 제공하는 소켓 라이브러리
#include <WinSock2.h>
#include <MSWSock.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")


int main()
{
	save("GameServer.cpp", "ServerCodeFile.txt");

	WSADATA wsData;
	if (::WSAStartup(MAKEWORD(2, 2), &wsData))
		return 0;

	SOCKET listenSocket = ::socket(AF_INET, SOCK_STREAM, 0);
	if (listenSocket == INVALID_SOCKET) {

		int32 errCode = ::WSAGetLastError();
		cout << "SocketErrorCode" << endl;
		return 0;
	}


	//회사의 주소를 찍어줘야함(나의 주소는?)
	SOCKADDR_IN	serverAddr;//IPv4
	::memset(&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
	serverAddr.sin_port = htons(7777);


	//안내원의 폰을 개통해줘야함.!
	if (::bind(listenSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
	{
		int32 errCode = ::WSAGetLastError();
		cout << "SocketErrorCode" << endl;
		return 0;
	}


	//영업 시작
	if (::listen(listenSocket, 10)) {
		int32 errCode = WSAGetLastError();
		cout << "Listen ErrorCode" << endl;
		return 0;
	}

	//-------------------------

	while (true) {
		SOCKADDR_IN	clientAddr;//IPv4
		::memset(&clientAddr, 0, sizeof(serverAddr));
		int32 addrLen = sizeof(clientAddr);
		
		
		
		SOCKET clientSocket = ::accept(listenSocket, (SOCKADDR*)&clientAddr, &addrLen);
		//cleint소켓이 데이터를 주고 받을때 사용함!!!
		if (clientSocket == INVALID_SOCKET) {
			int32 errCode = ::WSAGetLastError();
			cout << "Accept Error" << errCode << endl;
			return 0;	SOCKADDR_IN	serverAddr;//IPv4
			::memset(&serverAddr, 0, sizeof(serverAddr));
		}

		//손님 입장
		char ipAddress[16];
		::inet_ntop(AF_INET, &clientAddr.sin_addr, ipAddress, sizeof(ipAddress));
		cout << "client Conneted! IP" << ipAddress << endl;



		while (true) {
			//==============================================
			// 통신 코드 작성
			//===============================================
		
			//얼만큼 보낼지 모르니 넉넉히 잡는다
			char recvBuffer[1000];


			//==============================================
			//서버 -> 클라 리시브 코드 
			//===============================================
		
			//받은 데이터의 크기를 반환해줌 recv 데이터는 -1을 반환하면.문제가 생김
			int32 recvLen = ::recv(clientSocket, recvBuffer, sizeof(recvBuffer),0);
			if (recvLen <= 0) {
				int32 errCode = ::WSAGetLastError();
				cout << "Recv ErrorCode" << endl;
				return 0;

			}
	
			cout << "Recv Data! Data == " << recvBuffer << endl;
			cout << "Recv Data! len == " << recvLen << endl;
			///////////////////////////////////////////////////////
		

			//==============================================
			//서버 - > 클라 데이터 전송 코드
			//===============================================
			int32 resultCode = ::send(clientSocket, recvBuffer, sizeof(recvBuffer), 0);
			if (resultCode == SOCKET_ERROR) {

				int32 errCode = ::WSAGetLastError();
				cout << "send ErrorCode:  " << errCode << endl;
				return 0;
			}


		}

	}

	//-------------------------

	//소켓 리소스 반환
	closesocket(listenSocket);

	//윈속 종료.
	::WSACleanup();
}



==================================================
GameServer.cpp, 저장시간: 2023-08-25 금요일 오전 2:43:23
==================================================
//==============================================
// GAMESERVERCODE
// =============================================
// 목차: UDP 코드 작성
//==============================================
#include "pch.h"
#include <iostream>


//마이크로소프트에서 제공하는 소켓 라이브러리
#include <WinSock2.h>
#include <MSWSock.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")

void HandleError(const char* cause) {
	int32 errCode = ::WSAGetLastError();
	cout << cause << "ErrorCode" << errCode << endl;

}

int main()
{
	save("GameServer.cpp", "ServerCodeFile.txt");

	WSADATA wsData;
	if (::WSAStartup(MAKEWORD(2, 2), &wsData))
		return 0;

	SOCKET  serverSocket = ::socket(AF_INET, SOCK_DGRAM, 0);
	if (serverSocket == INVALID_SOCKET) {
		HandleError("Socket");
		return 0;
	}
	
	SOCKADDR_IN	serverAddr;//IPv4
	::memset(&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_addr.s_addr = ::htonl(INADDR_ANY);
	serverAddr.sin_port = htons(7777);

	if (::bind(serverSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
		HandleError("Bind");
		return 0;
	}

	cout << "Server" << endl;
	while (true) {

		Sleep(1000);
		//==============================================
		//클라 - > 서버 데이터 전송 코드
		//===============================================
		SOCKADDR_IN clientAddr;
		::memset(&clientAddr, 0, sizeof(clientAddr));
		int32 addrLen = sizeof(clientAddr);

		char recvBuffer[1000];

		int32 recvLen =::recvfrom(serverSocket, recvBuffer, sizeof(recvBuffer), 0, (SOCKADDR*)&clientAddr, &addrLen);

		if (recvLen <= 0) {
			 
			HandleError("RecvFrom");
			return 0;
		}

		cout << "Recv Data! Data == " << recvBuffer << endl;
		cout << "Recv Data! len == " << recvLen << endl;
		////////////////////////////////////////////////////////////
		
		//==============================================
		//서버 - > 클라 데이터 전송 코드
		//===============================================

		int32 errorCode = ::sendto(serverSocket, recvBuffer, recvLen,0,(SOCKADDR*)&clientAddr, sizeof(clientAddr));
		if (errorCode == SOCKET_ERROR) {

			HandleError("socket");
			return 0; 

		}

		cout << "send Data! Len" << recvLen << endl;

	}


	//윈속 종료.
	::WSACleanup();
}



==================================================
GameServer.cpp, 저장시간: 2023-08-25 금요일 오전 3:17:06
==================================================
//==============================================
// GAMESERVERCODE
// =============================================
// 목차: SOCKET OPTION!
//==============================================
#include "pch.h"
#include <iostream>


//마이크로소프트에서 제공하는 소켓 라이브러리
#include <WinSock2.h>
#include <MSWSock.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")

void HandleError(const char* cause) {
	int32 errCode = ::WSAGetLastError();
	cout << cause << "ErrorCode" << errCode << endl;

}

int main()
{
	save("GameServer.cpp", "ServerCodeFile.txt");
	cout << "Server" << endl;
	WSADATA wsData;
	if (::WSAStartup(MAKEWORD(2, 2), &wsData))
		return 0;

	SOCKET  serverSocket = ::socket(AF_INET, SOCK_DGRAM, 0);
	if (serverSocket == INVALID_SOCKET) {
		HandleError("Socket");
		return 0;
	}

	//옵션을 해석 하고 처리할 주체?
	//소켓 코드 - >SOL_SOCKET
	//IPv4-> IPPROTO_IP
	//TCP PROTOCOL -> IPPROTO_TCP

	//SO_KEEPALIVE = 주기적으로 연결 상태 확인 여부 (TCP ONLY)
	//상대방이 소리소문없이 연결을 끊는다면?
	//주기적으로 TCP 프로토콜 연결 상태 확인,-> 끊어진 연결 감지
	{
		bool enable = true;
		setsockopt(serverSocket, SOL_SOCKET, SO_KEEPALIVE, (char*)&enable, sizeof(enable));
	}
	//SO_LINGER  = 지연하다.
	// 송신 버퍼에 있는 데이터를 보낼 것인가 ? 날릴것인가에 대한 얘기

	//onoff = 0이면 closesocket()이 바로 리턴, 아니면 linger초만큼 대기 (default 0)
	//linger : 대기시간
	LINGER linger;
	linger.l_onoff = 1; 
	linger.l_linger = 5;
	::setsockopt(serverSocket, SOL_SOCKET, SO_KEEPALIVE, (char*)&linger, sizeof(linger));


	//Half-close
	//SD_SEND :send 막는다.
	//SD_RECEIVE :recv 막는다.
	//SD_BOTH: 둘다 막는다.
	::shutdown(serverSocket, SD_SEND);

	//소켓 리소스 반환
	//send-> closesocket
	//::closesocket(serverSocket);

	//SO_SNDBUF = 송신 버퍼 크기
	//SO_RCVBUF = 수신 버퍼 크기

	int32 sendBufferSize;
	int32 optionLen = sizeof(sendBufferSize);
	::getsockopt(serverSocket, SOL_SOCKET, SO_SNDBUF, (char*)&sendBufferSize, &optionLen);
	cout << "송신 버퍼 크기: " << sendBufferSize << endl;


	int32 recvBufferSize;
	 optionLen = sizeof(recvBufferSize);
	::getsockopt(serverSocket, SOL_SOCKET, SO_SNDBUF, (char*)&recvBufferSize, &optionLen);
	cout << "송신 버퍼 크기: " << recvBufferSize << endl;
	

	//SO_REUSEADDR
	//IP 주소 및 PORT 재사용
	{
		//예상치못한 서버 종료 같은후 포트번호 재사용까지 시간이 쫌 필요한데 그걸 무시하고 실행가능
		bool enable = true;
		::setsockopt(serverSocket, SOL_SOCKET, SO_REUSEADDR, (char*)&enable, sizeof(enable));
	}

	// IPPROTO_TCP
	// TCP_NODELAY = Nagle 네이글 알고리즘 작동 여부
	// 데이터가 충분히 크면 보내고 ,그렇지 않으면 데이터가 충분히 쌓일때까지 대기!
	// 장점: 작은 패킷이 불필요하게 많이 생성되는 일을 방지
	// 단점: 반응 시간 손해
	{
		bool enable = true;
		::setsockopt(serverSocket, IPPROTO_TCP, TCP_NODELAY, (char*)&enable, sizeof(enable));
	}


	//윈속 종료.
	::WSACleanup();
}


==================================================
GameServer.cpp, 저장시간: 2023-08-26 토요일 오전 1:20:12
==================================================
//==============================================
// GAMESERVERCODE
// =============================================
// 목차: 논블로킹 소켓
//==============================================
#include "pch.h"
#include <iostream>


//마이크로소프트에서 제공하는 소켓 라이브러리
#include <WinSock2.h>
#include <MSWSock.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")

void HandleError(const char* cause) {
	int32 errCode = ::WSAGetLastError();
	cout << cause << "ErrorCode" << errCode << endl;

}

int main()
{
	save("GameServer.cpp", "ServerCodeFile.txt");
	cout << "Server" << endl;


	WSADATA wsData;
	if (::WSAStartup(MAKEWORD(2, 2), &wsData))
		return 0;

	//블로킹(Blocking) 소켓
	// accept -> 접속한 클라가 있을때
	//connet-> 서버 접속 성공했을때
	//send , sendto -> 요청한 데이터를 송신 버퍼에 복사했을때
	//recv, recvfrom -> 수신 버퍼에 도착한 데이터가 있고, 이를 유저 레벨 버퍼에 복사했을때
	
	//논 블로킹(Non- Blocking)

	SOCKET listenSocket = ::socket(AF_INET, SOCK_STREAM, 0);
	if (listenSocket == INVALID_SOCKET)
	{
		return 0;
	}


	u_long on = 1;
	if (::ioctlsocket(listenSocket, FIONBIO, &on) == INVALID_SOCKET)
		return 0;
	
	
	SOCKADDR_IN serverAddr;
	::memset(&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
	serverAddr.sin_port = htons(7777);


	if (::bind(listenSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
		return 0;


	if (::listen(listenSocket, SOMAXCONN) == SOCKET_ERROR)
		return 0;


		SOCKADDR_IN clientAddr;
		int32 addrLen = sizeof(clientAddr);


		//Accept
		while (true) {

			SOCKET clientSocket = ::accept(listenSocket, (SOCKADDR*)&clientAddr, &addrLen);
			if (clientSocket == INVALID_SOCKET) {

				//원래 블록 했어야했는데...너가 논블로킹으로 하라며
				if (::WSAGetLastError() == WSAEWOULDBLOCK)
					continue;

				//Error
				break;
			}

			cout << "client Conneted!" << endl; 

			//recv
			while (true) {

				char recvBuffer[1000];
				int32 recvLen = ::recv(clientSocket, recvBuffer, sizeof(recvBuffer), 0);

				if (recvLen == SOCKET_ERROR) {

					if (::WSAGetLastError() == WSAEWOULDBLOCK)
						continue;

					break;
				}
				else if (recvLen == 0) {
					//연결 끊어짐
					break;
				}

				cout << "Recv Data Len = " << recvLen << endl;

				//send
				while (true) {

					if (::send(clientSocket, recvBuffer, recvLen, 0) == SOCKET_ERROR) {


						//원래 블록 했어야했는데.. 너가 논 블로킹으로 하라며,...
						if (::WSAGetLastError() == WSAEWOULDBLOCK)
							continue;

						//Error
						break;
					}

					cout << "send Data! Len = " << recvLen << endl;
				}
			}
			
		}

	//윈속 종료.
	::WSACleanup();
}



==================================================
GameServer.cpp, 저장시간: 2023-08-26 토요일 오전 2:12:16
==================================================
//==============================================
// GAMESERVERCODE
// =============================================
// 목차: select 모델
//==============================================
#include "pch.h"
#include <iostream>


//마이크로소프트에서 제공하는 소켓 라이브러리
#include <WinSock2.h>
#include <MSWSock.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")

void HandleError(const char* cause) {
	int32 errCode = ::WSAGetLastError();
	cout << cause << "ErrorCode" << errCode << endl;

}
const int32 BUFSIZE = 1000;

//동접수만큼 만들어짐 session은
struct Session {

	SOCKET socket;
	char recvBuffer[BUFSIZE] = {};
	int32 recvBytes = 0;
	int32 sendBytes = 0;

};


int main()
{
	save("GameServer.cpp", "ServerCodeFile.txt");
	cout << "Server" << endl;


	WSADATA wsData;
	if (::WSAStartup(MAKEWORD(2, 2), &wsData))
		return 0;

	SOCKET listenSocket = ::socket(AF_INET, SOCK_STREAM, 0);
	if (listenSocket == INVALID_SOCKET)
	{
		return 0;
	}


	u_long on = 1;
	if (::ioctlsocket(listenSocket, FIONBIO, &on) == INVALID_SOCKET)
		return 0;
	
	
	SOCKADDR_IN serverAddr;
	::memset(&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
	serverAddr.sin_port = htons(7777);


	if (::bind(listenSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
		return 0;


	if (::listen(listenSocket, SOMAXCONN) == SOCKET_ERROR)
		return 0;

	cout << "Accept" << endl;

	//Select 모델  =(select 함수가 핵심이 되는)
	//select 입출력 모델을 이용하는 이유는 , 간단한 테스트 같은거 할때 좋기 때문에.
	// 소켓 함수 호출이 성공할 시점을 미리 알 수 있다.
	
	// 문제상황))
	//수신 버퍼에 데이터가 없는데,read  한다거나!
	//송신 버퍼가 꽉 찼는데, write 한다거나!
	// - 블로킹 소켓 : 조건이 만족되지 않아서 블로킹 되는 상황 예방
	// - 논블로킹 소켓 : 조건이 만족되지 않아서 불필요하게 반복 체크하는 상황을 예방

	//socket set
	//1.읽기[] 쓰기 []  예외(Out OF Bound) [] 관찰 대상 등록
	//OOB(Out Of Bound는 send() 마지막 인자 MSG_OBB로 보내는 특별한 데이터
	//받는 쪽에서도 recv OOB 세팅을 해야 읽을수 있음
	
	//2.select(readSet , WriteSet , ExceptSet) -> 관찰 시작
	
	//3. 적어도 하나의 소켓이 준비되면 리턴->낙오자는 알아서 제거됨

	//4. 남은 소케[ㅅ 체크해서 진행

	//fd_set read ;
	// FD_ZERO : 비운다.
	//ex)FD_ZERO(set);
	//FD_SET : 소켓 s를 제거
	//ex)FD_CLR(s,&Set);
	//FD_ISSET:소켓 S가 set에 들어있으면 0이 아닌 값을 리턴한다.

	vector<Session> sessions;
	sessions.reserve(100);

	fd_set reads;
	fd_set writes;

	while (true) {
		//소켓 셋 초기화
		FD_ZERO(&reads); 
		FD_ZERO(&writes);

		//ListenSocket 등록
		FD_SET(listenSocket, &reads);

		//소켓 등록
		for (Session& s : sessions) {
			
		
			if (s.recvBytes <= s.sendBytes)
				FD_SET(s.socket, &reads);
			else
				FD_SET(s.socket, &writes);
		}

		//[옵션] 마지막 timeout 인자 설정 가능
		int retVal = ::select(0, &reads, &writes, nullptr, nullptr); 
		if (retVal == SOCKET_ERROR) 
			break;
		
		//Listener 소켓 체크
		if (FD_ISSET(listenSocket, &reads)) {
			SOCKADDR_IN clientAddr;
			int32 addrLen = sizeof(clientAddr);
			SOCKET clientSocket = ::accept(listenSocket, (SOCKADDR*)&clientAddr, &addrLen);
			if (clientSocket != INVALID_SOCKET) {
				cout << "Clinet Conneted" << endl;
				sessions.push_back(Session{clientSocket});
			}
		}

		//나머지 소켓 체크
		for (Session& s : sessions) {

			//read체크
			if (FD_ISSET(s.socket, &reads)) {
				int32 recvLen = ::recv(s.socket, s.recvBuffer, BUFSIZE, 0);
				if (recvLen <= 0) {
				//TODO :sessions 제거
					continue;
				}

				s.recvBytes = recvLen;
			}
			//write 체크

			if (FD_ISSET(s.socket, &writes)) {

				//블로킹 모드 - > 모든 데이터 다 보냄
				//논블로킹 모드 -> 일부만 보낼수가 있음(상대방 수신 버퍼 상황에 따라
				int32 sendLen = ::send(s.socket, &s.recvBuffer[s.sendBytes], s.recvBytes - s.sendBytes, 0);
				if (sendLen == SOCKET_ERROR) {

					continue;

				}

				s.sendBytes += sendLen;
				if (s.recvBytes == s.sendBytes) {
					s.recvBytes = 0;
					s.sendBytes = 0;
				}


			}


		}
	}



	//윈속 종료.
	::WSACleanup();
}



==================================================
GameServer.cpp, 저장시간: 2023-08-26 토요일 오후 11:22:57
==================================================
//==============================================
// GAMESERVERCODE
// =============================================
// 목차: WSAEventSelect
//==============================================
// Select는 매번마다 초기화를 했어야하는 코드를 했어야했지만, 이 모델은 이벤트를 통해서 해결함
// Select와 마찬가지로 이벤트를 최대 64개를 만들수 있어서 이건 염두해두고 해야함.

	//WASEventSelect = (WSAEventselect 함수가 핵심이 되는)
	//소켓과 관련된 네트워크 이벤트를 [이벤트 객체]를 통해 감지

	//이벤트 객체 관련 함수들
	// 생성 : WSACreateEvent (수동 리셋 Manual -Reset + Non -Signaled 상태 시작)
	// 삭제 : WSACloseEvent
	//신호 상태 감지: WSAWaitForMultipleEvents
	//구체적인 네트워크 이벤트 알아내기 : WSAEnumNetworkEvents

	//소켓 <=> 이벤트 객체 연동
	//WSAEventSelect (socket ,event , networkEvents)
	// - 관심 잇는 네트워크 이벤트
	// FD_ACCEPT : 접속한 클라가 있음 accept
	//FD_READ	:데이터 수신 가능 recv , recvfrom
	//FD_WRITE	:데이터 송신 가능 send , sendto
	// FD_CLOSE :상대가 접속 종료
	//FD_CONNET	:통신을 위한 연결 절차 완료
	//FD_OOB

	//주의 사항
	//WSAEventSelect 함수를 호출하면, 해당 소켓은 자동으로 넌블로킹 모드 전환
	// accept() 함수가 리턴하는 소켓은 listenSocket과 동일한 속성을 갖는다.
	//-따라서 clientSocket은 FD_READ , FD_WRITE 등을 다시 등록 필요
	// 드물게 WSAEWOULDBLOCK 오류가 뜰 수 있으니 예외처리 필요
	// 중요)
	// -이벤트 발생시, 적절한 소켓 함수 호출해야함.
	//- 아니면 다음번에 동일 네트워크 이벤트가 발생 X
	// ex) FD_READ 이벤트 떳으면 recv() 호출해야하고, 안하면 FD_READ 두번 다시 X

	//1 ) count , event
	//2 ) waitAll: 모두 기다림? 하나만 완료 되어도 OK?
	//3 ) time out : 타임 아웃
	//4 ) 지금은 false
	// return :완료된 첫번째 인덱스

	//1) socket
	//2) eventObject : socket과 연동된 이벤트 객체 핸들을 넘겨주면, 이벤트 객체를 non - signealed
	//3) networkEvent : 네트워크 이벤트  /오류 정보가 저장


#include "pch.h"
#include <iostream>


//마이크로소프트에서 제공하는 소켓 라이브러리
#include <WinSock2.h>
#include <MSWSock.h>
#include <ws2tcpip.h>
#pragma comment(lib, "ws2_32.lib")

void HandleError(const char* cause) {
	int32 errCode = ::WSAGetLastError();
	cout << cause << "ErrorCode" << errCode << endl;

}
const int32 BUFSIZE = 1000;

//동접수만큼 만들어짐 session은
struct Session {

	SOCKET socket;
	char recvBuffer[BUFSIZE] = {};
	int32 recvBytes = 0;
	int32 sendBytes = 0;

};


int main()
{
	save("GameServer.cpp", "ServerCodeFile.txt");
	cout << "Server" << endl;


	WSADATA wsData;
	if (::WSAStartup(MAKEWORD(2, 2), &wsData))
		return 0;

	SOCKET listenSocket = ::socket(AF_INET, SOCK_STREAM, 0);
	if (listenSocket == INVALID_SOCKET)
	{
		return 0;
	}


	u_long on = 1;
	if (::ioctlsocket(listenSocket, FIONBIO, &on) == INVALID_SOCKET)
		return 0;


	SOCKADDR_IN serverAddr;
	::memset(&serverAddr, 0, sizeof(serverAddr));
	serverAddr.sin_family = AF_INET;
	serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
	serverAddr.sin_port = htons(7777);


	if (::bind(listenSocket, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR)
		return 0;


	if (::listen(listenSocket, SOMAXCONN) == SOCKET_ERROR)
		return 0;

	cout << "Accept" << endl;


	//WSAWaitForMultipleEvents

	vector<WSAEVENT> wsaEvents;
	vector<Session> sessions;
	sessions.reserve(100);

	WSAEVENT listenEvent = ::WSACreateEvent();
	wsaEvents.push_back(listenEvent);
	sessions.push_back(Session{ listenSocket });

	if (::WSAEventSelect(listenSocket, listenEvent, FD_ACCEPT | FD_CLOSE) == SOCKET_ERROR)
		return 0;


	while (true) {
		//인덱스가 반환됨
		int32 index = ::WSAWaitForMultipleEvents(wsaEvents.size(), &wsaEvents[0], FALSE, WSA_INFINITE, FALSE);
		if (index == WSA_WAIT_FAILED)
			continue;


		index -= WSA_WAIT_EVENT_0;

		//::WSAResetEvent() 이것을 넣어도 되고 안되도 되지만 , WSAEnumNetworkEvents에 들어가 잇음

		WSANETWORKEVENTS networkEvents;
		if (::WSAEnumNetworkEvents(sessions[index].socket, wsaEvents[index], &networkEvents) == SOCKET_ERROR)
			continue;


		//listener 소켓 체크
		if (networkEvents.lNetworkEvents & FD_ACCEPT) {

			//Error - check
			if (networkEvents.iErrorCode[FD_ACCEPT_BIT] != 0)
				continue;

			SOCKADDR_IN clientAddr;
			int32 addrLen = sizeof(clientAddr);

			SOCKET clientSocket = ::accept(listenSocket, (SOCKADDR*)&clientAddr, &addrLen);
			if (clientSocket != INVALID_SOCKET) {

				cout << "Client Conneted" << endl;

				WSAEVENT clientEvent = ::WSACreateEvent();
				wsaEvents.push_back(clientEvent);
				sessions.push_back(Session{ clientSocket });
				//클라언트 소켓이랑 리슨 이벤트랑 연동시켜줌
				if (::WSAEventSelect(clientSocket, clientEvent, FD_READ | FD_WRITE | FD_CLOSE) == SOCKET_ERROR)
					return 0;
			}
		}

		//Client Session 소켓 체크
		if (networkEvents.lNetworkEvents & FD_READ || networkEvents.lNetworkEvents & FD_WRITE) {

			//Error - Check
			if ((networkEvents.lNetworkEvents & FD_READ) && (networkEvents.iErrorCode[FD_READ_BIT] != 0))
				continue;
			//Error - Check
			if ((networkEvents.lNetworkEvents & FD_WRITE) && (networkEvents.iErrorCode[FD_WRITE_BIT] != 0))
				continue;

			Session& s = sessions[index];

			if (s.recvBytes == 0) {
				int32 recvLen = ::recv(s.socket, s.recvBuffer, BUFSIZE, 0);
				if (recvLen == SOCKET_ERROR && ::WSAGetLastError() != WSAEWOULDBLOCK) {


					//TODO :Remove Session
					continue;

				}

				s.recvBytes = recvLen;
				cout << "Recv Data=" << recvLen << endl;

			}


			//Write
			if (s.recvBytes > s.sendBytes) {

				int32 sendLen = ::send(s.socket, &s.recvBuffer[s.sendBytes], s.recvBytes - s.sendBytes, 0);

				if (sendLen == SOCKET_ERROR && ::WSAGetLastError() != WSAEWOULDBLOCK) {

					cout << "sendLen error" << endl;
					continue;
				}

				s.sendBytes += sendLen;
				if (s.recvBytes == s.sendBytes) {

					s.recvBytes = 0;
					s.sendBytes = 0;
				}

				cout << "Send Data =" << sendLen << endl;

			}
		}

		//FD_CLOSE 처리
		if (networkEvents.lNetworkEvents & FD_CLOSE) {

			//TODO: remove Socket
		}
	}



	//윈속 종료.
	::WSACleanup();
}

